name: build docker image and publish to server

on:
  push:
    branches: [ "main" ]

env:
  # Use GitHub Container Registry
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/jukebox:latest

jobs:
    publish_private:
      name: publish image
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3
      - name: Login
        run: |
          echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Publish
        run: |
          cd frontend
          npm install
          npm run build:server
          cd ../backend
          docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    deploy:
      needs: publish_private
      name: deploy image
      runs-on: ubuntu-latest

      steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: connect and pull
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
          echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin && \
          cd ${{ secrets.WORK_DIR }} && \
          docker compose stop && \
          docker compose pull && \
          docker compose up -d && \
          exit"
      - name: cleanup
        run: rm -rf ~/.ssh




    publish_public_image:
      name: build and publish public image
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login
        run: |
          echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  
      - name: Build and Publish
        run: |
          # Cr√©er un nouveau builder avec support multi-architecture
          docker buildx create --name multiarch-builder --use
          
          # Construire et pousser l'image multi-architecture
          docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v8 \
            -f docker/Dockerfile.raspberry \
            -t ${{ env.REGISTRY }}/${{ github.actor }}/jukebox-public:latest \
            --push .
